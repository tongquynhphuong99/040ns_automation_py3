*** Settings ***
Library                          SeleniumLibrary   run_on_failure=SL.Capture Page Screenshot    WITH NAME    SL

*** Variables ***
${device_info_wan_page}=         https://192.168.1.1/cgi-bin/status_wan_summary.asp

*** Keywords ***

###
Open WAN Summary Page
    [Documentation]              Open WAN Summary Page

    SL.Click Element                                xpath=//*[@id="status_deviceinfo"]
    SL.Click Element                                xpath=//*[@id="sta-network"]
    SL.Wait Until Page Contains                     IPv4 Connection
    ...                                             timeout=20s
    ...                                             error=\nWAN Info Page Not Found
    SL.Page Should Contain                          IPv4 Connection

    SL.Select Frame                                 xpath=//frame[@name="contentfrm"]

###
Get Column Index
    [Documentation]             Get column index base on column name.
    ...                         Input:
    ...                         1. column_name
    ...                         Return:
    ...                         1. Column index if found, else return 'None'

    [Arguments]                 ${column_name}

    ${index}=                   Set Variable     None
    SL.Set Selenium Speed       0.1
    FOR     ${i}     IN RANGE      1     13
            ${element_is_visible}=    Run Keyword And Return Status       SL.Element Should Be Visible    xpath=//*[@id="network_info"]/tbody/tr[1]/td[${i}]
            Exit For Loop If    '${element_is_visible}' == 'False'
            ${column_name_tmp}=       SL.Get Text    xpath=//*[@id="network_info"]/tbody/tr[1]/td[${i}]
            ${index}=          Set Variable If    '${column_name_tmp}' == '${column_name}'     ${i}
            Exit For Loop If   '${column_name_tmp}' == '${column_name}'
    END
    SL.Set Selenium Speed       0.3
    RETURN                      ${index}

Get Row Index
    [Documentation]             Get row index base on column name and column value.
    ...                         Input:
    ...                         1. column_name
    ...                         2. column_value
    ...                         Return:
    ...                         1. Row index if found, else return 'None'

    [Arguments]                 ${column_name}   ${column_value}

    ${index}=                   Set Variable     None
    SL.Set Selenium Speed       0.1
    ${column_index_tmp}=        SeleniumStatusWANInfoLib.Get Column Index            ${column_name}
    FOR    ${row_i}     IN RANGE   2     20
           ${element_is_visible}=    Run Keyword And Return Status       SL.Element Should Be Visible    xpath=//*[@id="network_info"]/tbody/tr[${row_i}]/td[2]
            Exit For Loop If    '${element_is_visible}' == 'False'
           Exit For Loop If    '${element_is_visible}' == 'False'
           ${column_value_tmp}=     SL.Get Text     xpath=//*[@id="network_info"]/tbody/tr[${row_i}]/td[${column_index_tmp}]
           ${index}=           Set Variable If     '${column_value}' in '${column_value_tmp}'    ${row_i}
           Exit For Loop If    '${column_value}' in '${column_value_tmp}'
    END
    SL.Set Selenium Speed       0.3
    RETURN                      ${index}

###
Get Cell Value
    [Documentation]             Get value of cell base on column name and row index.
    ...                         If found, return cell value, else return 'None'
    ...                         Input:
    ...                         1. column_name
    ...                         2. row_index
    ...                         Return:
    ...                         1. cell_value

    [Arguments]                 ${column_name}       ${row_index}
    ${cell_value}=              Set Variable         None

    ${column_index_tmp}=        SeleniumStatusWANInfoLib.Get Column Index    ${column_name}
    Return From Keyword If      '${row_index}' == 'None'     None
    ${cell_value_tmp}=          SL.Get Text     xpath=//*[@id="network_info"]/tbody/tr[${row_index}]/td[${column_index_tmp}]
    ${cell_value}=              Set Variable    ${cell_value_tmp}
    RETURN                      ${cell_value}

###
Wan Status Should Be Connected
    [Documentation]             Check WAN status whether it's connected, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         Pass or Failed

    [Arguments]                 ${vlan_id}

    ### WAN Summary Page
    Open WAN Summary Page
    Sleep                       2s

    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=Connection Name    column_value=${vlan_id}
    ${wan_status}=              SeleniumStatusWANInfoLib.Get Cell Value   column_name=Status       row_index=${row_index}
    Log To Console              Wan ${vlan_id} Status: ${wan_status}
    Should Contain              ${wan_status}    Connect

###
Wan Status Should Be Unconnected
    [Documentation]             Check WAN status whether it's disconnected, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         Pass or Failed

    [Arguments]                 ${vlan_id}

    ### WAN Summary Page
    Open WAN Summary Page
    Sleep                       2s

    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=Connection Name    column_value=${vlan_id}
    ${wan_status}=              SeleniumStatusWANInfoLib.Get Cell Value   column_name=Status       row_index=${row_index}
    Log To Console              Wan ${vlan_id} Status: ${wan_status}
    Should Contain              ${wan_status}    Unconnect











###
Get Wan IPv4 Address
    [Documentation]             Get Wan IPv4 Address base on vlan id. If found return IP address, else return None
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         1. wan_ip_address

    [Arguments]                 ${vlan_id}


    ### WAN Summary Page
    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ${wan_ip_address}=          Set Variable    None
    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index     column_name=VlanMuxId    column_value=${vlan_id}
    ${wan_ip_address}=          SeleniumStatusWANInfoLib.Get Cell Value   column_name=IPv4 Addr    row_index=${row_index}
    Log To Console              WAN ${vlan_id} IPv4 address: ${wan_ip_address}
    RETURN                      ${wan_ip_address}
    
###
Get Wan IPv6 Address
    [Documentation]             Get Wan IPv6 Address base on vlan id. If found return IP address, else return None
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         1. wan_ip_address

    [Arguments]                 ${vlan_id}


    ### WAN Summary Page
    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ${wan_ip_address}=          Set Variable    None
    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=VlanMuxId    column_value=${vlan_id}
    ${wan_ip_address}=          SeleniumStatusWANInfoLib.Get Cell Value   column_name=IPv6 Addr    row_index=${row_index}
    Log To Console              WAN IPv6 address: ${wan_ip_address}
    RETURN                      ${wan_ip_address}

###
Wan IPv4 Address Should Be Visible

    [Arguments]                 ${vlan_id}

    ${wan_IP_address}=          Get Wan IPv4 Address    ${vlan_id}
    Should Match Regexp         ${wan_IP_address}    [0-9]{1,3}\\.+[0-9]{1,3}\\.+[0-9]{1,3}\\.+[0-9]{1,3}
    RETURN                      ${wan_IP_address}

###
Wan IP Address Should Not Be Visible

    [Arguments]                 ${vlan_id}

    ${wan_ip_address}=          Get Wan IPv4 Address    ${vlan_id}
    Should Not Match Regexp     ${wan_ip_address}     [0-9]{1,3}\\.+[0-9]{1,3}\\.+[0-9]{1,3}\\.+[0-9]{1,3}

###
Wan IPv4 Connection Should Be Success
    [Documentation]             Verify WAN is created successfully on web (status=Connected, get IP address)
    [Arguments]                                    ${vlan_id}

    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ### Check WAN Status
    Wan Status Should Be Connected            vlan_id=${vlan_id}
    ${wan_IP_address}=    Wan IPv4 Address Should Be Visible              vlan_id=${vlan_id}
    RETURN                    ${wan_IP_address}
    
###
Wan IPv4 Connection Should Be Failed
    [Arguments]                                    ${vlan_id}

    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ### Check WAN Status
    Wan Status Should Be Unconnected              vlan_id=${vlan_id}
    Wan IP Address Should Not Be Visible           vlan_id=${vlan_id}

###
Wan Bridge Connection Should Be Success
    [Documentation]             Verify WAN Bridge is created successfully on web (status=Connected, IP address: N/A)
    [Arguments]                                    ${vlan_id}

    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]    

    ### Check WAN Status
    Wan Status Should Be Connected            vlan_id=${vlan_id}
    Wan IP Address Should Not Be Visible           vlan_id=${vlan_id}

###
Save WAN IP Address
   [Arguments]                                       ${vlan_id}

    # Delay before check
    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]    

    Wan Status Should Be Connected            vlan_id=${vlan_id}
    ${wan_ip_address}=                             Get Wan IPv4 Address    ${vlan_id}
    RETURN                                          ${wan_ip_address}

###
Check Wan Status
    [Documentation]             Check WAN status by arguments, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         2. desired_wan_stautus : Connected, Disconnected, Connecting
    ...                         Return:
    ...                         Pass or Failed
    [Arguments]                 ${vlan_id}
    ...                         ${desired_wan_status}=Connected
    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=VlanMuxId    column_value=${vlan_id}
    ${wan_status}=              SeleniumStatusWANInfoLib.Get Cell Value   column_name=Status       row_index=${row_index}
    Log To Console              Wan Status: ${wan_status}
    Should Be Equal             '${wan_status}'    '${desired_wan_status}'


# ###
# Wan IP Address Should Not Be Equal
#     [Documentation]             Compare expected WAN IP address and existed WAN IP address base on VLAN ID. Should not match.
#     ...                         Input:
#     ...                         1. expected_wan_IP_address
#     ...                         2. vlan_id
#     [Arguments]                 ${expected_wan_IP_address}    ${vlan_id}
#     ${existed_wan_IP_address}=  Get Wan IP Address    ${vlan_id}
#     Should Not Be Equal         ${expected_wan_IP_address}    ${existed_wan_IP_address}

# ###
# Wan IP Address Should Be Equal
#     [Arguments]                 ${expected_wan_IP_address}    ${vlan_id}
#     ${existed_wan_IP_address}=  Get Wan IP Address    ${vlan_id}
#     Should Be Equal             ${expected_wan_IP_address}    ${existed_wan_IP_address}

# ###
# Counting Number Exist WAN
#     ${row_number}=                       Set Variable    ${0}
#     :FOR                                 ${i}    IN RANGE    1    9999
#     \    ${check_row_exist}=             Run Keyword And Return Status    SL.Page Should Contain Element
#     ...                                  xpath=//table[@class="wholetable"]/tbody/tr[${i}]
#     \    Exit For Loop If                not ${check_row_exist}
#     \    ${row_number}=                  Evaluate    ${row_number} + ${1}
#     ${row_number}=                       Evaluate    ${row_number} - ${1}
#     [Return]                             ${row_number}


###
Firewall Status Should Be Enabled
    [Documentation]             Check Firewall status whether it's enabled, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         Enabled or Disabled

    [Arguments]                 ${vlan_id}

    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=VlanMuxId    column_value=${vlan_id}
    ${firewall_status}=         SeleniumStatusWANInfoLib.Get Cell Value   column_name=Fire Wall     row_index=${row_index}
    Log To Console              Firewall Status: ${firewall_status}
    Should Be Equal             '${firewall_status}'    'Enable'

###
Firewall Status Should Be Disabled
    [Documentation]             Check Firewall status whether it's enabled, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         Enabled or Disabled

    [Arguments]                 ${vlan_id}

    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=VlanMuxId    column_value=${vlan_id}
    ${firewall_status}=         SeleniumStatusWANInfoLib.Get Cell Value   column_name=Fire Wall    row_index=${row_index}
    Log To Console              Firewall Status: ${firewall_status}
    Should Be Equal             '${firewall_status}'    'Disabled'
###
Disconnect WAN
    [Arguments]                          ${vlan_id}
    ${row_index}=                        SeleniumStatusWANInfoLib.Get Row Index        column_name=VlanMuxId    column_value=${vlan_id}
    ${column_index}=                     SeleniumStatusWANInfoLib.Get Column Index            Action
    SL.Page Should Contain Element       xpath=//tr[${row_index}]/td[${column_index}]/input[@value="Deactive"]
    SL.Click Element                     xpath=//tr[${row_index}]/td[${column_index}]/input[@value="Deactive"]
    Log To Console                       Deactive WAN ${vlan_id}
    Sleep                                5

###
Connect WAN
    [Arguments]                          ${vlan_id}
    ${row_index}=                        SeleniumStatusWANInfoLib.Get Row Index     column_name=VlanMuxId    column_value=${vlan_id}
    ${column_index}=                     SeleniumStatusWANInfoLib.Get Column Index             Action
    SL.Page Should Contain Element       xpath=//tr[${row_index}]/td[${column_index}]/input[@value=" Active "]
    SL.Click Element                     xpath=//tr[${row_index}]/td[${column_index}]/input[@value=" Active "]
    Log To Console                       Active WAN ${vlan_id}
    Sleep                                5

###
Counting Number Exist WAN
    ${row_number}=                       Set Variable    ${0}
    FOR                                 ${i}    IN RANGE    1    9999
        ${check_row_exist}=             Run Keyword And Return Status    SL.Page Should Contain Element
    ...                                  xpath=//table[@class="wholetable"]/tbody/tr[${i}]
        Exit For Loop If                not ${check_row_exist}
        ${row_number}=                  Evaluate    ${row_number} + ${1}
    END
    ${row_number}=                       Evaluate    ${row_number} - ${1}
    RETURN                             ${row_number}

###
NAT Status Should Be Enabled
    [Documentation]             Check NAT status whether it's enabled, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         Enabled or Disabled

    [Arguments]                 ${vlan_id}

    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index      column_name=VlanMuxId    column_value=${vlan_id}
    ${nat_status}=              SeleniumStatusWANInfoLib.Get Cell Value     column_name=NAT          row_index=${row_index}
    Log To Console              NAT Status: ${nat_status}
    Should Be Equal             '${nat_status}'    'Enable'

###
NAT Status Should Be Disabled
    [Documentation]             Check NAT status whether it's enabled, base on VLAN ID
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         Enabled or Disabled

    [Arguments]                 ${vlan_id}

    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=VlanMuxId    column_value=${vlan_id}
    ${nat_status}=              SeleniumStatusWANInfoLib.Get Cell Value   column_name=NAT          row_index=${row_index}
    Log To Console              NAT Status: ${nat_status}
    Should Be Equal             '${nat_status}'    'Disabled'

###
Get Wan Interface
    [Documentation]             Get WAN Interface name base on Vlan ID. If found return name of interface, else return None
    ...                         Input:
    ...                         1. vlan_id
    ...                         Return:
    ...                         1. wan_interface

    [Arguments]                 ${vlan_id}
    Open WAN Summary Page
    Sleep                       2s
    SL.Click Element            xpath=//input[@name="stRefresh"]

    ${wan_interface}=           Set Variable    None
    ${row_index}=               SeleniumStatusWANInfoLib.Get Row Index    column_name=VlanMuxId    column_value=${vlan_id}
    ${wan_interface}=           SeleniumStatusWANInfoLib.Get Cell Value   column_name=Interface    row_index=${row_index}
    RETURN                    ${wan_interface}
    SL.Unselect Frame